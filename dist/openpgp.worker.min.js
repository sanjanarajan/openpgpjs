/*! OpenPGP.js v3.0.0 - 2018-03-05 - this is LGPL licensed code, see LICENSE/our website https://openpgpjs.org/ for more information. */
!function e(n,r,t){function o(a,f){if(!r[a]){if(!n[a]){var c="function"==typeof require&&require;if(!f&&c)return c(a,!0);if(i)return i(a,!0);var s=new Error("Cannot find module '"+a+"'");throw s.code="MODULE_NOT_FOUND",s}var u=r[a]={exports:{}};n[a][0].call(u.exports,function(e){var r=n[a][1][e];return o(r||e)},u,u.exports,e,n,r,t)}return r[a].exports}for(var i="function"==typeof require&&require,a=0;a<t.length;a++)o(t[a]);return o}({1:[function(e,n,r){self.window={},importScripts("openpgp.min.js");var t=window.openpgp,o=4e4;function i(e){t.crypto.random.randomBuffer.size<o&&self.postMessage({event:"request-seed"}),self.postMessage(e,t.util.getTransferables(e.data))}t.crypto.random.randomBuffer.init(6e4),self.onmessage=function(e){var n=e.data||{};switch(n.event){case"configure":!function(e){for(var n in e)t.config[n]=e[n]}(n.config);break;case"seed-random":!function(e){e instanceof Uint8Array||(e=new Uint8Array(e));t.crypto.random.randomBuffer.set(e)}(n.buf);break;default:!function(e,n,r){if("function"!=typeof t[n])return void i({id:e,event:"method-return",err:"Unknown Worker Event"});r=t.packet.clone.parseClonedPackets(r,n),t[n](r).then(function(n){i({id:e,event:"method-return",data:t.packet.clone.clonePackets(n)})}).catch(function(n){i({id:e,event:"method-return",err:n.message,stack:n.stack})})}(n.id,n.event,n.options||{})}}},{}]},{},[1]);